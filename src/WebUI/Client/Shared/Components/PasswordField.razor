@using System.Linq.Expressions

<MudTextField 
    For=@For
    Immediate=@Immediate
    OnlyValidateIfDirty=@OnlyValidateIfDirty
    Label="@Label" 
    @bind-Value="Password" 
    Adornment="Adornment.End" 
    AdornmentIcon="@icon" 
    OnAdornmentClick="TogglePasswordVisibility" 
    InputType="@input_type"
    Variant=@Variant
    OnKeyPress=@OnKeyPress/>

@code {
    [Parameter]
    public Expression<Func<string>> For { get; set; } = null!;
    [Parameter]
    public bool Immediate { get; set; }
    [Parameter]
    public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }
    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public bool OnlyValidateIfDirty { get; set; } = false;
    [Parameter]
    public Variant Variant { get; set; }
    [Parameter]
    public string Password
    {
        get => password_value;
        set 
        {
            if (password_value == value) return;
            password_value = value;
            PasswordChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    private string password_value = string.Empty;
    private bool visibility;
    private InputType input_type = InputType.Password;
    private string icon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        visibility = !visibility;
        input_type = visibility ? InputType.Text : InputType.Password;
        icon = visibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }
}